// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface RegistrationSubmitResponse ()
+ (RegistrationSubmitResponse *)fromList:(NSArray *)list;
+ (nullable RegistrationSubmitResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation RegistrationSubmitResponse
+ (instancetype)makeWithRId:(NSString *)rId
    errorCode:(nullable NSString *)errorCode {
  RegistrationSubmitResponse* pigeonResult = [[RegistrationSubmitResponse alloc] init];
  pigeonResult.rId = rId;
  pigeonResult.errorCode = errorCode;
  return pigeonResult;
}
+ (RegistrationSubmitResponse *)fromList:(NSArray *)list {
  RegistrationSubmitResponse *pigeonResult = [[RegistrationSubmitResponse alloc] init];
  pigeonResult.rId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.rId != nil, @"");
  pigeonResult.errorCode = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable RegistrationSubmitResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [RegistrationSubmitResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.rId ?: [NSNull null]),
    (self.errorCode ?: [NSNull null]),
  ];
}
@end

@interface RegistrationDataApiCodecReader : FlutterStandardReader
@end
@implementation RegistrationDataApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [RegistrationSubmitResponse fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface RegistrationDataApiCodecWriter : FlutterStandardWriter
@end
@implementation RegistrationDataApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[RegistrationSubmitResponse class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface RegistrationDataApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation RegistrationDataApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[RegistrationDataApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[RegistrationDataApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *RegistrationDataApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    RegistrationDataApiCodecReaderWriter *readerWriter = [[RegistrationDataApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void RegistrationDataApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<RegistrationDataApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.registration_client.RegistrationDataApi.startRegistration"
        binaryMessenger:binaryMessenger
        codec:RegistrationDataApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startRegistrationLanguages:completion:)], @"RegistrationDataApi api (%@) doesn't respond to @selector(startRegistrationLanguages:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_languages = GetNullableObjectAtIndex(args, 0);
        [api startRegistrationLanguages:arg_languages completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.registration_client.RegistrationDataApi.evaluateMVEL"
        binaryMessenger:binaryMessenger
        codec:RegistrationDataApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(evaluateMVELFieldData:expression:completion:)], @"RegistrationDataApi api (%@) doesn't respond to @selector(evaluateMVELFieldData:expression:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_fieldData = GetNullableObjectAtIndex(args, 0);
        NSString *arg_expression = GetNullableObjectAtIndex(args, 1);
        [api evaluateMVELFieldData:arg_fieldData expression:arg_expression completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.registration_client.RegistrationDataApi.getPreviewTemplate"
        binaryMessenger:binaryMessenger
        codec:RegistrationDataApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPreviewTemplateIsPreview:completion:)], @"RegistrationDataApi api (%@) doesn't respond to @selector(getPreviewTemplateIsPreview:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isPreview = GetNullableObjectAtIndex(args, 0);
        [api getPreviewTemplateIsPreview:arg_isPreview completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.registration_client.RegistrationDataApi.submitRegistrationDto"
        binaryMessenger:binaryMessenger
        codec:RegistrationDataApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(submitRegistrationDtoMakerName:completion:)], @"RegistrationDataApi api (%@) doesn't respond to @selector(submitRegistrationDtoMakerName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_makerName = GetNullableObjectAtIndex(args, 0);
        [api submitRegistrationDtoMakerName:arg_makerName completion:^(RegistrationSubmitResponse *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
